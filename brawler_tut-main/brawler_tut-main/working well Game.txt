import pygame
import sys
from button import Button
from pygame import mixer
from fighter import Fighter

pygame.init()

SCREEN = pygame.display.set_mode((1500, 800))
pygame.display.set_caption("Warrior's Wrath")

BG = pygame.image.load("assets/Background.png")


def get_font(size):
    return pygame.font.Font("assets/font.ttf", size)


def play():
    choose_fighter()

def display_selected_fighters(selected_fighter_1, selected_fighter_2):
    SELECTED_FIGHTER_FONT = pygame.font.Font("assets/fonts/turok.ttf", 40)

    # Display selected fighter for Player 1
    if selected_fighter_1 is not None:
        fighter_1_text = SELECTED_FIGHTER_FONT.render("Player 1: " + selected_fighter_1, True, (255, 255, 255))
        fighter_1_rect = fighter_1_text.get_rect(center=(640, 100))
        SCREEN.blit(fighter_1_text, fighter_1_rect)

    # Display selected fighter for Player 2
    if selected_fighter_2 is not None:
        fighter_2_text = SELECTED_FIGHTER_FONT.render("Player 2: " + selected_fighter_2, True, (255, 255, 0))
        fighter_2_rect = fighter_2_text.get_rect(center=(640, 100))
        SCREEN.blit(fighter_2_text, fighter_2_rect)

    pygame.display.update()
def choose_fighter():
    selected_fighter_1 = None
    selected_fighter_2 = None

    while selected_fighter_1 is None or selected_fighter_2 is None:
        FIGHTER_MOUSE_POS = pygame.mouse.get_pos()

        SCREEN.fill("black")

        FIGHTER_TEXT = get_font(45).render("Choose Your Fighters!", True, "White")
        FIGHTER_RECT = FIGHTER_TEXT.get_rect(center=(640, 260))
        SCREEN.blit(FIGHTER_TEXT, FIGHTER_RECT)

        WARRIOR_BUTTON = Button(image=pygame.image.load("assets/Play Rect.png"), pos=(640, 400),
                                text_input="Warrior", font=get_font(75), base_color="#d7fcd4",
                                hovering_color="White")
        WIZARD_BUTTON = Button(image=pygame.image.load("assets/Play Rect.png"), pos=(640, 500),
                               text_input="Wizard", font=get_font(75), base_color="#d7fcd4",
                               hovering_color="White")
        BACK_BUTTON = Button(image=pygame.image.load("assets/Play Rect.png"), pos=(640, 650),
                             text_input="Back", font=get_font(75), base_color="#d7fcd4", hovering_color="White")

        for button in [WARRIOR_BUTTON, WIZARD_BUTTON, BACK_BUTTON]:
            button.changeColor(FIGHTER_MOUSE_POS)
            button.update(SCREEN)

        display_selected_fighters(selected_fighter_1, selected_fighter_2)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if WARRIOR_BUTTON.checkForInput(FIGHTER_MOUSE_POS):
                    if selected_fighter_1 is None:
                        selected_fighter_1 = "warrior"
                    elif selected_fighter_2 is None:
                        selected_fighter_2 = "warrior"
                elif WIZARD_BUTTON.checkForInput(FIGHTER_MOUSE_POS):
                    if selected_fighter_1 is None:
                        selected_fighter_1 = "wizard"
                    elif selected_fighter_2 is None:
                        selected_fighter_2 = "wizard"
                elif BACK_BUTTON.checkForInput(FIGHTER_MOUSE_POS):
                    main_menu()

        if selected_fighter_1 is not None and selected_fighter_2 is not None:
            play_with_fighters(selected_fighter_1, selected_fighter_2)



def play_with_fighters(selected_fighter_1, selected_fighter_2):
    while True:

        pygame.init()

        # create game window
        SCREEN_WIDTH = 1500
        SCREEN_HEIGHT = 800

        screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
        pygame.display.set_caption("Brawler")

        # set framerate
        clock = pygame.time.Clock()
        FPS = 60

        # define colours
        RED = (255, 0, 0)
        YELLOW = (255, 255, 0)
        WHITE = (255, 255, 255)

        # define game variables
        intro_count = 0
        last_count_update = pygame.time.get_ticks()
        score = [0, 0]  # player scores. [P1, P2]
        round_over = False
        ROUND_OVER_COOLDOWN = 2000

        # define fighter variables
        WARRIOR_SIZE = 161
        WARRIOR_SCALE = 4
        WARRIOR_OFFSET = [112, 50]
        WARRIOR_DATA = [WARRIOR_SIZE, WARRIOR_SCALE, WARRIOR_OFFSET]
        WIZARD_SIZE = 250
        WIZARD_SCALE = 2
        WIZARD_OFFSET = [112, 60]
        WIZARD_DATA = [WIZARD_SIZE, WIZARD_SCALE, WIZARD_OFFSET]

        # load music and sounds
        pygame.mixer.music.load("assets/audio/music.mp3")
        pygame.mixer.music.set_volume(0.5)
        pygame.mixer.music.play(-1, 0.0, 5000)
        sword_fx = pygame.mixer.Sound("assets/audio/sword.wav")
        sword_fx.set_volume(0.5)
        magic_fx = pygame.mixer.Sound("assets/audio/magic.wav")
        magic_fx.set_volume(0.75)

        victory_sound = pygame.mixer.Sound("assets/audio/victory.mp3")
        victory_sound.set_volume(0.5)
        # load background image
        bg_image = pygame.image.load("assets/images/background/background.jpg").convert_alpha()

        # load spritesheets
        warrior_sheet = pygame.image.load("assets/images/warrior/Sprites/warrior.png").convert_alpha()
        wizard_sheet = pygame.image.load("assets/images/wizard/Sprites/wizard.png").convert_alpha()

        # load vicory image
        victory_img = pygame.image.load("assets/images/icons/victory.png").convert_alpha()

        # define number of steps in each animation
        WARRIOR_ANIMATION_STEPS = [4, 8, 2, 4, 4, 3, 7]
        WIZARD_ANIMATION_STEPS = [8, 6, 1, 4, 4, 3, 8]

        # define font
        count_font = pygame.font.Font("assets/fonts/turok.ttf", 80)
        score_font = pygame.font.Font("assets/fonts/turok.ttf", 30)

        # function for drawing text
        def draw_text(text, font, text_col, x, y):
            img = font.render(text, True, text_col)
            screen.blit(img, (x, y))

        # function for drawing background
        def draw_bg():
            scaled_bg = pygame.transform.scale(bg_image, (SCREEN_WIDTH, SCREEN_HEIGHT))
            screen.blit(scaled_bg, (0, 0))

        # function for drawing fighter health bars
        def draw_health_bar(health, x, y):
            ratio = health / 100
            pygame.draw.rect(screen, WHITE, (x - 2, y - 2, 404, 34))
            pygame.draw.rect(screen, RED, (x, y, 400, 30))
            pygame.draw.rect(screen, YELLOW, (x, y, 400 * ratio, 30))

        # create two instances of fighters
        fighter_1 = Fighter(1, 200, 700, False, WARRIOR_DATA, warrior_sheet, WARRIOR_ANIMATION_STEPS, sword_fx) \
            if selected_fighter_1 == "warrior" else Fighter(1, 200, 700, False, WIZARD_DATA, wizard_sheet,
                                                            WIZARD_ANIMATION_STEPS, magic_fx)

        fighter_2 = Fighter(2, 1400, 700, True, WARRIOR_DATA, warrior_sheet, WARRIOR_ANIMATION_STEPS, sword_fx) \
            if selected_fighter_2 == "warrior" else Fighter(2, 1400, 700, True, WIZARD_DATA, wizard_sheet,
                                                            WIZARD_ANIMATION_STEPS, magic_fx)
        # game loop
        run = True
        while True:

            clock.tick(FPS)

            # draw background
            draw_bg()

            # show player stats
            draw_health_bar(fighter_1.health, 20, 20)
            draw_health_bar(fighter_2.health, 1090, 20)
            draw_text("P1: " + str(score[0]), score_font, RED, 20, 60)
            draw_text("P2: " + str(score[1]), score_font, RED, 1090, 60)

            # update countdown
            if intro_count <= 0:
                # move fighters
                fighter_1.move(SCREEN_WIDTH, SCREEN_HEIGHT, screen, fighter_2, round_over)
                fighter_2.move(SCREEN_WIDTH, SCREEN_HEIGHT, screen, fighter_1, round_over)
            else:
                # display count timer
                draw_text(str(intro_count), count_font, RED, SCREEN_WIDTH / 2, SCREEN_HEIGHT / 3)
                # update count timer
                if (pygame.time.get_ticks() - last_count_update) >= 1000:
                    intro_count -= 1
                    last_count_update = pygame.time.get_ticks()

            # update fighters
            fighter_1.update()
            fighter_2.update()

            # draw fighters
            fighter_2.draw(SCREEN)
            fighter_1.draw(screen)

            # check for player defeat
            if not round_over:
                if not fighter_1.alive:
                    score[1] += 1
                    round_over = True
                    round_over_time = pygame.time.get_ticks()
                elif not fighter_2.alive:
                    score[0] += 1
                    round_over = True
                    round_over_time = pygame.time.get_ticks()
            else:
                if not victory_sound.play(0, 0):
                    # display victory image
                    screen.blit(victory_img, (360, 150))
                if pygame.time.get_ticks() - round_over_time > ROUND_OVER_COOLDOWN:
                    round_over = False
                    intro_count = 3
                    fighter_1 = Fighter(1, 200, 500, False, WARRIOR_DATA, warrior_sheet, WARRIOR_ANIMATION_STEPS,
                                        sword_fx) if selected_fighter_1 == "warrior" else Fighter(1, 200, 500, False,
                                                                                                  WIZARD_DATA,
                                                                                                  wizard_sheet,
                                                                                                  WIZARD_ANIMATION_STEPS,
                                                                                                  magic_fx)
                    fighter_2 = Fighter(2, 1200, 500, True, WARRIOR_DATA, warrior_sheet, WARRIOR_ANIMATION_STEPS,
                                        sword_fx) if selected_fighter_2 == "warrior" else Fighter(2, 1200, 500, True,
                                                                                                  WIZARD_DATA,
                                                                                                  wizard_sheet,
                                                                                                  WIZARD_ANIMATION_STEPS,
                                                                                                  magic_fx)

                    # Break out of the play_with_fighters loop and go back to choose_fighter
                    choose_fighter()

            # event handler
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    run = False
                    pygame.quit()

            # update display
            pygame.display.update()

        # exit pygame
        pygame.quit()


def options():
    while True:
        OPTIONS_MOUSE_POS = pygame.mouse.get_pos()

        SCREEN.fill("white")

        OPTIONS_TEXT = get_font(45).render("This is the OPTIONS screen.", True, "Black")
        OPTIONS_RECT = OPTIONS_TEXT.get_rect(center=(640, 260))
        SCREEN.blit(OPTIONS_TEXT, OPTIONS_RECT)

        OPTIONS_BACK = Button(image=None, pos=(640, 460),
                              text_input="BACK", font=get_font(75), base_color="Black", hovering_color="Green")

        OPTIONS_BACK.changeColor(OPTIONS_MOUSE_POS)
        OPTIONS_BACK.update(SCREEN)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if OPTIONS_BACK.checkForInput(OPTIONS_MOUSE_POS):
                    main_menu()

        pygame.display.update()


def main_menu():
    while True:
        SCREEN.blit(BG, (0, 0))

        MENU_MOUSE_POS = pygame.mouse.get_pos()

        MENU_TEXT = get_font(100).render("Warrior's Wrath", True, "#b68f40")
        MENU_RECT = MENU_TEXT.get_rect(center=(750, 200))

        PLAY_BUTTON = Button(image=pygame.image.load("assets/Play Rect.png"), pos=(750, 300),
                             text_input="Start", font=get_font(75), base_color="#d7fcd4", hovering_color="White")
        OPTIONS_BUTTON = Button(image=pygame.image.load("assets/Options Rect.png"), pos=(750, 400),
                                text_input="Options", font=get_font(75), base_color="#d7fcd4", hovering_color="White")
        QUIT_BUTTON = Button(image=pygame.image.load("assets/Quit Rect.png"), pos=(750, 550),
                             text_input="QUIT", font=get_font(75), base_color="#d7fcd4", hovering_color="White")

        SCREEN.blit(MENU_TEXT, MENU_RECT)

        for button in [PLAY_BUTTON, OPTIONS_BUTTON, QUIT_BUTTON]:
            button.changeColor(MENU_MOUSE_POS)
            button.update(SCREEN)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if PLAY_BUTTON.checkForInput(MENU_MOUSE_POS):
                    play()
                if OPTIONS_BUTTON.checkForInput(MENU_MOUSE_POS):
                    options()
                if QUIT_BUTTON.checkForInput(MENU_MOUSE_POS):
                    pygame.quit()
                    sys.exit()

        pygame.display.update()


main_menu()
